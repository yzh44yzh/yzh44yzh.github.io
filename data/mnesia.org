- прочитать доки
  + https://learnyousomeerlang.com/mnesia
  + https://elixirschool.com/ru/lessons/specifics/mnesia/
  + Programming Erlang, chapter 13
  - Mnesia User’s Guide
    http://erlang.org/doc/apps/mnesia/Mnesia_chap1.html
  - Mnesia Reference Manual
    http://erlang.org/doc/man/mnesia.html


** Чуть-чуть погружения в историю.

Историю mnesia. Когда. Почему такое название.

год 2008? TODO Какой?
Я бросаю флэш и ухожу в бэкенд. Начинаю изучать эрланг.
Ульяновск. Лев Валкин. About Echo.
Riak, PostgreSQL.
TODO: Хорошо бы найти оригинал цитаты Льва Валкина про то, что эрланг рулез, мнезия г..но.

Я долго следовал рекомендациям Валкина. И поныне для меня Erlang -- язык №1, и PostgreSQL -- БД №1.
Как долго живут стериотипы, если ты начинающий, а тебе советует авторитет :)

Варгейминг. RabbitMQ, проблемы с персистентными очередями.
Я проникся, и долго не использовал персистентность в RabbitMQ.
Потом таки начал использовать, но там была уже реализация не на Mnesia.

Репутация mnesia.
Кларна -- по слухам, мучаются с Mnesia, мечтают о PostgreSQL.


** Что изменило мое мнение?

Изучение подходов в других чатах.
WhatsUp, Lol, Discord. (TODO пересмотреть эти материалы, что там полезного про мнезию? ссылки).
WhatsUp потом сделали ForgETS.

А почему, собственно, не использовать Mnesia в ситуациях, когда персистентность не нужна?

- пройтись по Чезарини, Фреду и другим источникам, выписать интересные моменты, типа:
It is the perfect choice for caching all of the user session data.


** Преимущества

- в памяти ноды, не нужно передавать данные по сети
- в нативных данных, не нужна сериализация
run in the same address space as the application
хранит эрланг-объекты, запросы пишутся на эрланг,
нет накладных расходов на сериализацию/десериализацию и передачу данных по tcp


** Наш сценарий использования

Тестовый проект. Что можно показать из него полезного? Эксперименты с рестартами отдельных нод в кластере.
Реальный проект. А там что полезного?

Опасения.
Какие есть в кластере? целостность данных. Скорость копирования всей таблицы на новую ноду.

Перф тесты.
выйграли по CPU и latency. В прод еще не вышли.
TODO: сколько мы ожидаем там данных? перф-тестили столько-то. Скорость копирования такая-то.


** Фичи

Распределенность.
There are basically two reasons for using more than one table replica: fault tolerance and speed.

Транзакции vs dirty mode.

что там с точки зрения CAP?
с транзакциями CP, в dirty-режиме AP.

query list comprehension  qlc
http://erlang.org/doc/man/qlc.html

Какие еще интересные фичи?


** Что вообще просходит с эрланговскими БД?

(Riak, CouchDB, ForgETS -- про нее есть отдельный доклад)
