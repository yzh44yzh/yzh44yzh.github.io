#+OPTIONS: ^:{}
* Erlang для веб. Фреймворки.

** Что такое веб-фреймворк?

Для начала выясним, какие фичи обычно имеет типичный веб-фреймворк.
Берем за основу самые популярные: Ruby on Rails и Django.

- Роутинг
- Сессии
- Шаблоны
- ORM
  - общий интерфейс к разным БД
  - генерация схемы БД из модели
  - миграция и откат схемы БД
- Генерация веб-интерфейса для CRUD операций
  - генерация и валидация форм
  - генерация таблиц
- Кеширование
- Локализация
- Отправка emails

Теперь посмотрим, что из этих фич есть в веб-фреймворках для Erlang, а чего нет.
И, наоборот, что в Erlang есть такого, чего нет в Rails и Django.


** Chicago Boss

Первым заслуживает разговора [[http://www.chicagoboss.org/][этот фреймворк]].
Развитый, стабильный, неплохо документированный.
Имеет много достоинств и мало недостатков :)

Автор Chicago Boss, *Evan Miller*, черпал вдохновение в Ruby on Rails.
Он попытался сохранить идеологию Rails, и в какой-то мере их архитектуру.
По мнению автора получилось лучше оригинала, ибо удалось сохранить все хорошее,
 и добавить к этому фичи Erlang :)

Автор, явный сторонник ООП, использовал параметризированные модули и parse transform,
чтобы сделать код приложения похожим на ООП. Плюс, он скрыл от разработчика
OTP-архитектуру, предлагая взамен MVC. Тем самым упростил порог входа
для разработчиков, не знакомых с Erlang.

Известно, что Ruby on Rails, это отдельный мир. И хороший разработчик на рельсах
совсем не обязательно хорошо знает Ruby и может на нем писать без рельс. Возможно,
будь Chicago Boss более популярным, аналогичная ситуация могла бы сложиться
и здесь :)

Вот пример кода:

#+BEGIN_SRC Erlang
-module(person, [Id, Name, Age]).

Person = person:new(id, "Joe", 4)
Person:validate()
Person:save()
#+END_SRC

Параметризированными модулями пронизан весь код, и на них нужно остановиться особо.
Это экспериментальная, не рекомендуемая к использованию и не документированная фича Erlang,
которая была в языке в версиях R13-R15. А в версии R16 ее убрали.
Но добавили специальный [[https://github.com/erlang/pmod_transform][parse transform]], чтобы приложения, использующие эту фичу,
все таки могли работать на R16. [[http://www.erlang.org/news/35][Подробнее тут]].
В итоге Chicago Boss без проблем работает на R16.

Раньше использовался веб сервер Mochiweb, сейчас Cowboy.

Код можно писать не только на Erlang, но и на Elixir, если хочется.


*** Фичи фреймворка

**** Роутинг
Ну понятное дело, какой веб-фреймворк может быть без ротинга?
Можно пользоваться дефолтным, где по URL и по именам конроллеров определяется,
какой из них нужно вызывать. И можно задавать свой, кастомный.

**** Сессии
Хранятся в ETS или в Mnesia. Авторизация и привязка запроса к сессии делаются
до вызова контроллера. Для этого нужно задавать свой hook.

**** ORM
BossRecord, похожий на ActiveRecord из Rails.
И BossDB, дающий общий интерфейс к разным базам данных.
Поддерживаются MySQL, PostgreSQL, Riak, MongoDB, Tokyo Tyrant и Mnesia.

В какой-то мере поддерживается миграция и откат схемы БД.

**** Шаблоны
ErlyDTL шаблоны копируют синтаксис шаблонов Django. Компилируются в beam файлы
(каждый шаблон в отдельный Erlang-модуль). Работают, по утверждению автора, очень быстро.

Их можно использовать отдельно от Chicago Boss.

**** Кеширование
Кеширование моделей реализовано как часть ORM. Кеширование шаблонов не нужно,
они и так хранятся в оперативной памяти как скомпилированные Erlang-модули.

**** Emails
Хорошая поддержка работы с emails. Получение и отправка писем.
Конечно с поддержкой ErlyDTL шаблонов.

**** Функциональные тесты
Свой фреймворк для создания и запуска функциональных тестов.

Кроме этого, Chicago Boss, опираясь на возможности Erlang,
предлагает нетипичные для веб-фреймворков фичи.

**** BossMQ
Своя реализация message queue.

**** BossNews
Событийная модель, рассылка событий, подписка на события.

**** WebSocket и long-polling
Разумеется, с эффективностью, недоступной для Ruby/Python.


*** Чего нехватает

Нет автоматической генерации CRUD-операций из модели.

Формы не генерируются, нужно вручную делать шаблоны для них.
Впрочем, есть вот какая-то стороняя либа для этого
https://github.com/ngaranko/boss_form, но я не смотрел на нее.

Функции валидации форм нужно писать вручную.

Нет генерации схемы БД из модели.

Так что тут не получится, как в Django, просто описав модель данных, сразу получить
полноценный CRUD веб-интерфейс. Придется еще поработать ручками :)

Локализация в какой-то мере поддерживается, но я не вникал, не скажу подробностей.


*** нынешнее состояние

Проект зрелый, развивается с 2010 года. > 1200 комитов, 54 контрибьютора.

В вики есть список сайтов, [[https://github.com/ChicagoBoss/ChicagoBoss/wiki/List-of-public-websites-built-with-Chicago-Boss][построенных на Chicago Boss]].
Там не густо. Но отметим среди них [[http://www.erlang-factory.com/][erlang-factory.com]].

Итого: самый развитый веб-фреймворк для Erlang. И лично я выбрал бы именно его.


** Nitrogen.
http://nitrogenproject.com/
https://github.com/nitrogen/nitrogen

*** возможности

*** нынешнее состояние

** какие еще есть веб-фреймворки для Erlang?

https://github.com/ChicagoBoss/ChicagoBoss/wiki/Comparison-of-Erlang-Web-Frameworks

http://zotonic.com/

https://synrc.com/apps/n2o/doc/web/

На мой взгляд, не нужно пытаться копировать дух и стиль Ruby on Rails/Django,
а нужно посмотреть на фреймворки в языках, близких по парадигме: Clojure, Scala, Haskell, OCaml
Вот и следующая тема: "каким мог бы быть Erlang веб-фреймворк".

** Пару слов и моих веб-проектах на Erlang

*** проект №1
  админка для игры
  Cowboy, ErlyDTL, postgres driver
  формы генерировал и валидировал вручную

  сама игра
  АПИ для мобильного клиента (TCP-сокет, Ranch, bert-сериализация)
  АПИ для флэш клиента (cowboy, json-сериализация)

*** проект №2 джанго-mysql-erlang
  админка - django
  шаблонизатор xslt

*** проект №3 tvzavr.ru api
  nginx впереди

html-страницу отдает django, и она кешируется на уровне nginx
специфичная для юзера инфа запрашивается отдельно через rest api (erlang)

















[3:04:13 PM] Yura Zhloba: у меня похожий проект, джанго + эрланг. Сервера джанго и ковбой работают независимо друг от друга. Роутинг сперва разруливает nginx, решает, что кинуть на джанго, а что на ковбой.
[3:04:43 PM] Alexey Zankevich: хотя задача, думаю, типовая, учитывая, что протокол wsgi не поддерживает вебсокетов
[3:04:52 PM] Alexey Zankevich: а почему не эрланг, а nginx?
[3:04:53 PM] Yura Zhloba: собственно, особо никакого взаимодействия и нет. Джанго сам по себе, эрланг сам по себе. Точка соприкосновения  только база.
[3:05:35 PM] Yura Zhloba: nginx проще админам. И так исторически сложилось
[3:05:36 PM] Alexey Zankevich: все-равно интересно, как решается сессии - на ковбое написали мидлварь, который джанговскиий auth реализуетЮ
[3:05:44 PM] Yura Zhloba: сессии через мемкэш
[3:05:49 PM] Andrei Dziahel: > [серада, 16 ліпень 2014 15.03.12 Yura Zhloba] можно с этим разобраться и рассказать на встрече )
по идее примеры должны быть в erlyvideo
[3:06:20 PM] Alexey Zankevich: а пермишены и прочее, относящееся к авторазиции?
[3:06:35 PM] Yura Zhloba: это все в мемкэше. Эрланг это не создает, только читает
[3:07:27 PM] Yura Zhloba: ну мы пришиваем эрланг сбоку к уже готовой и давно работающей системе )
[3:07:38 PM] Yura Zhloba: если бы делать все с нуля, можно было бы что-то интереснее придумать )
[3:07:48 PM] Alexey Zankevich: хорошо, а как-таки идентифицирется пользователь?
[3:07:58 PM] Alexey Zankevich: достаете куки и по кукам лезете в мемкеш?
[3:08:17 PM] Yura Zhloba: ну я достаю из куки session_id, по нему из мемкеша достаю инфу о пользователе
[3:08:19 PM] Yura Zhloba: и все
[3:08:55 PM] Alexey Zankevich: понял :)
[3:09:36 PM] Alexey Zankevich: а если бы начал делать с нуля, то что бы поменял?
[3:10:03 PM] Alexey Zankevich: ну.. это чтобы мне обратить внимание
[3:10:13 PM] Yura Zhloba: ну это долгий разговор )
[3:10:17 PM] Alexey Zankevich: т.к. у меня в проекте давно назрела необходимость
[3:10:33 PM] Alexey Zankevich: эх.. ну ладно
[3:11:01 PM] Yura Zhloba: ну вот, в принципе, и тема: комбинированный веб-проект джанго(руби) + эрланг
[3:11:08 PM] Yura Zhloba: варианты, как это можно построить
[3:11:27 PM] Yura Zhloba: и какой вообще есть смысл так комбинировать
[3:11:28 PM] Alexey Zankevich: я голосую за эту тему, однозначно :)
[3:11:33 PM] Yura Zhloba: ок, я могу взяться
[3:11:44 PM] Yura Zhloba: но тогда встреча будет 1-го, мне нужно время
[3:12:11 PM] Alexey Zankevich: ну смысл у всех может свой, но потенциально это может решать такие проблемы
[3:12:40 PM] Alexey Zankevich: 1. вебсокеты (это просто - там достаточно накрутить любой левый сервис, держащий соединение)
[3:12:53 PM] Alexey Zankevich: 2. умный кеш
[3:13:02 PM] Alexey Zankevich: 3. распределенное апи для некоторых запросов
