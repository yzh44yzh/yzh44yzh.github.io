* Преимущества MySQL


** MySQL имеет больше пользователей

** MySQL обладает значительно более мощной реализацией ALTER TABLE.
TODO конкретно, что там есть такого?

Разумеется, у PostgreSQL есть свои нюансы. Например, если у вас есть таблица (id, login, pass), вы можете ALERT’нуть ее и получить (id, login, pass, email), но не (id, login, email, pass). То есть, добавлять столбцы можно только в конец.
Разве? Почему-то мне помнится, что я спокойно добавлял столбцы куда хотел.

** Команда слияния таблиц MERGE
TODO что за она?

** более мощная система привилегий

В то время как PostgreSQL обеспечивает лишь привилегии INSERT, SELECT
и UPDATE/DELETE над базой или таблицей, MySQL предоставляет
возможность определения полного набора разнообразных привилегий на
уровне базы, таблицы и столбца. Кроме того, MySQL позволяет задавать
привилегии для комбинаций хост/пользователь.
TODO убедиться, что это правда в отношении postgres


** Возможность сжатия доступных только для чтения таблиц

** используется протокол связи между клиентом и сервером со сжатием данных

** INSERT INTO blablabla ON DUPLICATE KEY UPDATE blablabla
Правильное решение заключается в том, чтобы написать merge-функцию. (для postgres)
В СУБД это называется термином UPSERT и с версии 9.0 постгрес их умеет.

* Недостатки MySQL

** Oracle
с 2008 года MySQL развивается компанией Oracle. Бытует
небезосновательное мнение, что Oracle намеренно тормозит развитие
MySQL. В настоящее время ведутся работы над множеством форков MySQL,
наиболее интересным среди которых, видимо, является MariaDB.

* Преимущества PostgreSQL

** надежность

Однажды я слушал доклад Константина Осипова, на котором, помимо
прочего, он упомянул один занятный эксперимент. Был написан генератор
случайных неправильных SQL-запросов в стиле WHERE * FROM
SELECT. Большинству людей никогда не придет в голову писать такое. Эти
запросы скармливались MySQL. В результате был найден десяток запросов,
роняющих СУБД.

** user-defined functions
есть в обоих, в postgres мощнее
возможность написания триггеров и хранимых процедур на Tcl, Perl и Python,

** некоторых случаях PostgreSQL оказывается ближе к ANSI SQL
вроде бы строго соблюдает, не?

** В PostgreSQL вы можете использовать курсоры.

Представьте, что некоторый запрос возвращает гигабайт данных. Вы
вынуждены передать весь этот гигабайт по сети (если СУБД работает на
отдельном сервере) и сохранить его в памяти перед тем, как что-то с
ним делать

Даже если используемый вами драйвер поддерживает функции типа
fetch_next_row, в действительности он все равно сначала кладет весь
результат выполнения запроса в память. С помощью курсоров вы можете не
только забирать данные кусками, тем самым обрабатывая их в постоянном
объеме памяти, но и свободно перемещаться по ним в разные
стороны. Например, вы можете прочитать первые 100 строк, потом
посмотреть 10001-ую, и в зависимости от ее значения перейти к
последней строке или вообще закрыть курсор.

в MySQL есть аналог, без чтения сразу всех данных на клиенте, но
одновременно можно открыть только один и в это время нельзя через это
подключение отправлять другие запросы.

** returning id
удобнее, чем last_insert_id

** функциональные индексы

Допустим, вам нужно хранить имя и фамилию пользователя в отдельных
столбцах и с учетом регистра, однако поиск пользователей при этом
происходит по полному имени и без учета регистра. Если СУБД не
поддерживает функциональные индексы, вы вынуждены создать в таблице
дополнительное поле со значением LOWER(first_name || ' ' ||
last_name), построить по нему индекс и поддерживать в этом поле
правильное значение. Если такого рода вариантов запросов десять, вам
понадобится десять дополнительных столбцов. Функциональные индексы,
как и следует из названия, позволяют построить индекс по произвольной
функции, избежав тем самым всех описанных проблем. Например, вы можете
эффективно выполнять запросы с условиями вроде WHERE sin(x) > 0.45 AND
sin(x) < 0.46.

** частичными индексами

Например, если вы ходите в базу с запросами вроде SELECT * FROM logs
WHERE ip > inet '192.168.0.0' AND ip < inet '192.168.0.255' AND level
= 'error', то можете построить индекс по полю ip только для строк,
значение поля level которых равно 'error'. Это имеет смысл, если логов
много, а строк со значением level = 'error' мало.

** GiST и SP-GiST индексов

можно найти все точки, находящиеся внутри заданного круга. GiST
индексы также позволяют, например, сортировать города по расстоянию до
ваших текущих координат. GIN индексы предназначены для работы с
типами, которые могут содержать более одного значения. Например, с
помощью индексов этого типа вы можете найти все массивы, содержащие
заданный элемент.

** большое к-во типов данных
UUID, IP- и MAC-адреса, точки, круги и другие геометрические фигуры, XML и JSON, а также массивы и диапазоны значений

** хранении географических данных R-деревья

** регулярные выражения

 в MySQL есть REGEXP/RLIKE.

** рекурсивные запросы

** наследование таблиц

* Недостатки PostgreSQL

** медленная работа команд INSERT, DELETE и UPDATE
так как они выполняются в транзакциях, а в MySQL могут быть нетразакционные таблицы

** Postgres требует периодического запуска VACUUM

TODO насколько это влияет на производительность?
нынче он не блокирует базу, но ведь влияет на производительность?


* Обе базы умеют

** бэкапы
TODO подробнее, какие варианты у обеих?
в PostgreSQL есть инкрементальный бакап

** репликация master-slave

master-master?
TODO ну и вообще вопросы масштабирования

Сейчас изкоробки есть master->slave репликация с поддержкой горячей
замены серверов, в том числе каскадная. Это конечно не автоматический
шардинг и репликасеты из монги, но зато работает.
Есть как встроенная
репликация, так и плагины, например Slonny. Встроенная репликация
более надежна и легче настраивается. Плагины более гибки.

** транзакции
TODO что там с ними в MySQL?
TODO Что насчет движков MyISAM и BerkeleyDB. Преимущества и недостатки обоих.
http://phpclub.ru/mysql/doc/table-types.html

Поддержка транзакций в MySQL пока что не настолько хорошо проверена, как в системе PostgreSQL.

Еще в postgresql можно CREATE/DROP/ALTER внутри транзакции делать. В mysql такого нет.

** полнотекстовый поиск
TODO особенности реализации в обеих, где лучше?
http://phpclub.ru/mysql/doc/fulltext-search.html

* Производительность

Заявляют, что MySQL намного превосходит PostgreSQL по скорости работы.

гм, спорное заявление. В каких случаях? Во всех?
Тут надо бы сделать бенчмарки. На select, select с индексом, вставку, обновление, like, joins и т.д.
сгенерировать достаточо большой датасет, прогнать запросы с explain, посмотреть время выполнения.
Извесно, что настройки по умолчанию postgres ориентированы не на большую производительность,
а на стабильность работы на всех возможных платформах. Так что по-хорошему еще нужно,
чтобы эти настройки тюнинговал грамотный DBA. Полагаю, тож самое нужно сделать и для mysql.
И только тогда сравнивать.


Фанатам postgres: масштабируемость не настолько уж и разнится,
особенно с пятой ветки. Использование InnoDB + raw disk даёт ещё
больший отрыв в производительности на простых запросах. Ну и простота
MySQL + обещанный falcon engine вообще нивелирует разницу в
производственных моментах между postgres и mysql.

Фанатам mysql: в плане высоких нагрузок лучше использовать
postgres :-) Производительность на сложных запросах выше, плюс
некоторые вкусности в плане администрирования.
